#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n de la base de datos
 * Ejecutar con: node scripts/check-db-config.js
 */

const { config } = require('dotenv');

// Cargar variables de entorno
config();

console.log('üîç Verificando configuraci√≥n de base de datos...\n');

// Variables de entorno esperadas
const expectedVars = [
    'POSTGRES_PRISMA_URL',
    'POSTGRES_URL_NON_POOLING',
    'POSTGRES_URL',
    'POSTGRES_USER',
    'POSTGRES_HOST',
    'POSTGRES_PASSWORD',
    'POSTGRES_DATABASE'
];

// Verificar variables de entorno
console.log('üìã Variables de entorno:');
expectedVars.forEach(varName => {
    const value = process.env[varName];
    const status = value ? '‚úÖ' : '‚ùå';
    const displayValue = value ?
        (varName.includes('PASSWORD') ? '[HIDDEN]' :
            varName.includes('URL') ? `${value.substring(0, 30)}...` : value) :
        'No configurada';

    console.log(`${status} ${varName}: ${displayValue}`);
});

console.log('\nüîó An√°lisis de conexiones:');

// Verificar POSTGRES_PRISMA_URL (conexi√≥n pooled)
const pooledUrl = process.env.POSTGRES_PRISMA_URL;
if (pooledUrl) {
    const isPooled = pooledUrl.includes('pgbouncer=true');
    const hasTimeout = pooledUrl.includes('connect_timeout');
    const hasSSL = pooledUrl.includes('sslmode=require');

    console.log(`‚úÖ POSTGRES_PRISMA_URL configurada`);
    console.log(`   ${isPooled ? '‚úÖ' : '‚ùå'} Incluye pgbouncer=true`);
    console.log(`   ${hasTimeout ? '‚úÖ' : '‚ùå'} Incluye connect_timeout`);
    console.log(`   ${hasSSL ? '‚úÖ' : '‚ùå'} Incluye sslmode=require`);
} else {
    console.log(`‚ùå POSTGRES_PRISMA_URL no configurada`);
}

// Verificar POSTGRES_URL_NON_POOLING (conexi√≥n directa)
const directUrl = process.env.POSTGRES_URL_NON_POOLING;
if (directUrl) {
    const isNotPooled = !directUrl.includes('pgbouncer=true');
    const hasSSL = directUrl.includes('sslmode=require');

    console.log(`‚úÖ POSTGRES_URL_NON_POOLING configurada`);
    console.log(`   ${isNotPooled ? '‚úÖ' : '‚ùå'} No incluye pgbouncer (conexi√≥n directa)`);
    console.log(`   ${hasSSL ? '‚úÖ' : '‚ùå'} Incluye sslmode=require`);
} else {
    console.log(`‚ùå POSTGRES_URL_NON_POOLING no configurada`);
}

console.log('\nüéØ Recomendaciones:');

if (!pooledUrl) {
    console.log('‚ùå Configura POSTGRES_PRISMA_URL para conexiones pooled de la aplicaci√≥n');
}

if (!directUrl && !process.env.POSTGRES_URL) {
    console.log('‚ùå Configura POSTGRES_URL_NON_POOLING para migraciones');
}

if (pooledUrl && !pooledUrl.includes('pgbouncer=true')) {
    console.log('‚ö†Ô∏è  POSTGRES_PRISMA_URL deber√≠a incluir pgbouncer=true');
}

if (directUrl && directUrl.includes('pgbouncer=true')) {
    console.log('‚ö†Ô∏è  POSTGRES_URL_NON_POOLING no deber√≠a incluir pgbouncer=true');
}

console.log('\nüìö Para m√°s informaci√≥n, consulta: docs/DATABASE_CONFIGURATION.md');

// Verificar configuraci√≥n de Better Auth
console.log('\nüîê Configuraci√≥n de Better Auth:');
const authUrl = process.env.BETTER_AUTH_URL;
const authSecret = process.env.BETTER_AUTH_SECRET;

console.log(`${authUrl ? '‚úÖ' : '‚ùå'} BETTER_AUTH_URL: ${authUrl || 'No configurada'}`);
console.log(`${authSecret ? '‚úÖ' : '‚ùå'} BETTER_AUTH_SECRET: ${authSecret ? '[HIDDEN]' : 'No configurada'}`);

if (pooledUrl && directUrl && authUrl && authSecret) {
    console.log('\nüéâ ¬°Configuraci√≥n completa! La aplicaci√≥n deber√≠a funcionar correctamente.');
} else {
    console.log('\n‚ö†Ô∏è  Configuraci√≥n incompleta. Revisa las variables faltantes.');
}